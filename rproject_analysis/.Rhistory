if(!require("tidyverse")) install.packages('tidyverse', repos='http://cran.us.r-project.org')
if(!require("Momocs")) install.packages('geomorph', repos='http://cran.us.r-project.org')
if(!require("ggtree")) install.packages('ggtree', repos='http://cran.us.r-project.org')
if(!require("ape")) install.packages('ape', repos='http://cran.us.r-project.org')
if(!require("Rphylip")) install.packages('Rphylip', repos='http://cran.us.r-project.org')
if(!require("tidytree")) install.packages('tidytree', repos='http://cran.us.r-project.org')
if(!require("phytools")) install.packages('phytools', repos='http://cran.us.r-project.org')
if(!require("kohonen")) install.packages('kohonen', repos='http://cran.us.r-project.org')
if(!require("cowplot")) install.packages('cowplot', repos='http://cran.us.r-project.org')
detach("package:Momocs", unload = TRUE)
library(Momocs)
backedpoints <- import_tps("TPS_BP_18_10_2019.tps", curves = TRUE) ### import .tps file
backed.points <- read.csv("backed.points.csv", header = TRUE, sep = ",", encoding = "UTF-8", row.names = 1)
backed.points$Site <- as.character(backed.points$Site)
backed.points$Context <- as.character(backed.points$Context)
outlinebp <- Out(backedpoints$coo, fac = backed.points)
outlinebp <- filter(outlinebp, Burinated=="N") ### removal of burinated examples
outlinebp <- filter(outlinebp, OTT=="Y") ### removal of cutting edges less than two-thirds
outlinebpatu  <- filter(outlinebp, !ATU %in% "Unspecified", !ATU %in% "Multiple")
outlinebpatu2 <- filter(outlinebp, !ATU2 %in% "Unspecified")
outlinebpNAT  <- filter(outlinebp, !NAT %in% "Backed Point (Unspecified)")
outlinebp$coo[which(outlinebp$Retouch.position=="Right")] <- lapply(outlinebp$coo[which(outlinebp$Retouch.position=="Right")], coo_flipy) ### flip outline
outlinebp$coo[which(outlinebp$Retouch.position=="Right")] <- lapply(outlinebp$coo[which(outlinebp$Retouch.position=="Right")], coo_rev) ### reverse landmark order
outlinebpatu$coo[which(outlinebpatu$Retouch.position=="Right")] <- lapply(outlinebpatu$coo[which(outlinebpatu$Retouch.position=="Right")], coo_flipy) ### flip outline
outlinebpatu$coo[which(outlinebpatu$Retouch.position=="Right")] <- lapply(outlinebpatu$coo[which(outlinebpatu$Retouch.position=="Right")], coo_rev) ### reverse landmark order
outlinebpatu2$coo[which(outlinebpatu2$Retouch.position=="Right")] <- lapply(outlinebpatu2$coo[which(outlinebpatu2$Retouch.position=="Right")], coo_flipy) ### flip outline
outlinebpatu2$coo[which(outlinebpatu2$Retouch.position=="Right")] <- lapply(outlinebpatu2$coo[which(outlinebpatu2$Retouch.position=="Right")], coo_rev) ### reverse landmark order
outlinebpNAT$coo[which(outlinebpNAT$Retouch.position=="Right")] <- lapply(outlinebpNAT$coo[which(outlinebpNAT$Retouch.position=="Right")], coo_flipy) ### flip outline
outlinebpNAT$coo[which(outlinebpNAT$Retouch.position=="Right")] <- lapply(outlinebpNAT$coo[which(outlinebpNAT$Retouch.position=="Right")], coo_rev) ### reverse landmark order
outlinebp     <- coo_centre(outlinebp) ### centre outlines
outlinebpatu  <- coo_centre(outlinebpatu) ### centre outlines
outlinebpatu2 <- coo_centre(outlinebpatu2) ### centre outlines
outlinebpNAT  <- coo_centre(outlinebpNAT) ### centre outlines
outlinetp     <- coo_centre(outlinetp) ### centre outlines
outlinebp     <- coo_scale(outlinebp) ### scale outlines
outlinebpatu  <- coo_scale(outlinebpatu) ### scale outlines
outlinebpatu2 <- coo_scale(outlinebpatu2) ### scale outlines
outlinebpNAT  <- coo_scale(outlinebpNAT) ### scale outlines
efourierbp <- efourier(outlinebp, nb.h = 24,  norm = TRUE) ### bp: 24 harmonics for 99.9%
efourierbpatu <- efourier(outlinebpatu, nb.h = 24,  norm = TRUE) ### bp: 24 harmonics for 99.9%
efourierbpatu2 <- efourier(outlinebpatu2, nb.h = 26,  norm = TRUE) ### bp: 26 harmonics for 99.9%
efourierbpNAT <- efourier(outlinebpNAT, nb.h = 24,  norm = TRUE) ### bp: 24 harmonics for 99.9%
pcabp <- PCA(efourierbp) ### bp: creation of PCA
pcabp$fac$FN
pcabp
pcabp$Site
pcabp$FN
bpmldata <- select(pcabp$fac, FN, Site, ATU, ATU2, NAT) %>% droplevels()
ggtree(bpml) %<+% bpmldata + geom_tiplab(aes(colour = ATU, align = TRUE), size = 3) + theme_minimal()
bpml <- read.tree(file = "bp_phylip/bptree")         ### FILE READ (ALTERNATIVE)
ggtree(bpml) %<+% bpmldata + geom_tiplab(aes(colour = ATU, align = TRUE), size = 3) + theme_minimal()
